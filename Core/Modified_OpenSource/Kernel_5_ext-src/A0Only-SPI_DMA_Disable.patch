--- linux_old/drivers/mtd/spi-nor/aspeed-smc.c	2021-04-07 17:34:52.086025303 +0530
+++ linux/drivers/mtd/spi-nor/aspeed-smc.c	2021-04-07 18:00:39.913905225 +0530
@@ -8,8 +8,6 @@
 #include <linux/bug.h>
 #include <linux/clk.h>
 #include <linux/device.h>
-#include <linux/dma-mapping.h>
-#include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
@@ -39,11 +37,6 @@
 	smc_type_spi  = 2,
 };
 
-enum aspeed_smc_data_dir {
-	SMC_DATA_IN  = 0,
-	SMC_DATA_OUT,
-};
-
 struct aspeed_smc_chip;
 struct aspeed_smc_controller;
 
@@ -67,9 +60,6 @@
 	u32 (*segment_end)(struct aspeed_smc_controller *controller, u32 reg);
 	u32 (*segment_reg)(struct aspeed_smc_controller *controller,
 			   u32 start, u32 end);
-	void (*safs_support)(struct aspeed_smc_controller *controller,
-		enum aspeed_smc_data_dir dir, uint8_t cmd, uint8_t addr_len,
-		uint8_t bus_width);
 };
 
 static void aspeed_smc_chip_set_4b(struct aspeed_smc_chip *chip);
@@ -172,10 +162,6 @@
 static int aspeed_smc_calibrate_reads_ast2600(struct aspeed_smc_chip *chip,
 	      u32 hdiv, const u8 *golden_buf, u8 *test_buf);
 
-void aspeed_2600_spi_fill_safs_cmd(struct aspeed_smc_controller *controller,
-		enum aspeed_smc_data_dir dir, uint8_t cmd,
-		uint8_t addr_len, uint8_t bus_width);
-
 static const struct aspeed_smc_info fmc_2600_info = {
 	.maxsize = 256 * 1024 * 1024,
 	.nce = 3,
@@ -210,7 +196,6 @@
 	.segment_start = aspeed_smc_segment_start_ast2600,
 	.segment_end = aspeed_smc_segment_end_ast2600,
 	.segment_reg = aspeed_smc_segment_reg_ast2600,
-	.safs_support = aspeed_2600_spi_fill_safs_cmd,
 };
 
 static const struct aspeed_smc_info spi2_2600_info = {
@@ -259,12 +244,8 @@
 	const struct aspeed_smc_info *info;	/* type info of controller */
 	void __iomem *regs;			/* controller registers */
 	void __iomem *ahb_base;			/* per-chip window resource */
-	uint8_t *write_buf;
-	dma_addr_t dma_addr_phy;
 	u32 ahb_base_phy;			/* phys addr of AHB window  */
 	u32 ahb_window_size;			/* full mapping window size */
-	int irq; /* for dma write */
-	struct completion dma_done;
 
 	unsigned long	clk_frequency;
 
@@ -348,26 +329,6 @@
 
 #define CALIBRATE_BUF_SIZE 0x4000
 
-#define OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL4	0x6c
-#define OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL2	0x74
-
-#define OFFSET_INTR_CTRL_STATUS	0x08
-#define OFFSET_DMA_CTRL			0x80
-#define OFFSET_DMA_FLASH_ADDR_REG	0x84
-#define OFFSET_DMA_RAM_ADDR_REG		0x88
-#define OFFSET_DMA_LEN_REG		0x8c
-
-#define SPI_DMA_IRQ_EN			BIT(3)
-#define CONTROL_DAM_REQUEST		BIT(31)
-#define CONTROL_DAM_GRANT		BIT(30)
-#define CONTROL_DMA_CALIB_MODE	BIT(3)
-#define CONTROL_DMA_CALC_CKSUM	BIT(2)
-#define CONTROL_DMA_ENABLE		BIT(0)
-#define CONTROL_DMA_STATUS		BIT(11)
-#define DMA_GET_REQ_MAGIC		0xaeed0000
-#define DMA_DISCARD_REQ_MAGIC	0xdeea0000
-#define WRITTEN_DMA_BUF_LEN		0x400
-
 /*
  * The Segment Registers of the AST2400 and AST2500 have a 8MB
  * unit. The address range of a flash SPI slave is encoded with
@@ -630,20 +591,6 @@
 	}
 }
 
-uint32_t aspeed_spi_get_io_mode(uint32_t bus_width)
-{
-	switch (bus_width) {
-	case 1:
-		return 0;
-	case 2:
-		return CONTROL_IO_DUAL_DATA;
-	case 4:
-		return CONTROL_IO_QUAD_DATA;
-	default:
-		return 0;
-	}
-}
-
 static void aspeed_smc_set_io_mode(struct aspeed_smc_chip *chip, u32 io_mode)
 {
 	u32 ctl;
@@ -677,94 +624,18 @@
 	return len;
 }
 
-static ssize_t aspeed_smc_write(struct spi_nor *nor, loff_t to,
+static ssize_t aspeed_smc_write_user(struct spi_nor *nor, loff_t to,
 				     size_t len, const u_char *write_buf)
 {
-	int ret;
 	struct aspeed_smc_chip *chip = nor->priv;
-	struct aspeed_smc_controller *controller = chip->controller;
-	const struct aspeed_smc_info *info = controller->info;
-	uint32_t decoded_reg_val;
-	uint32_t chip_ahb_start;
-	uint32_t reg_val;
-
-	if (len < 1)
-		return 0;
-
-	if (len > WRITTEN_DMA_BUF_LEN) {
-		dev_info(nor->dev,
-			 "written length exceeds expected value (0x%x)\n", len);
-		return 0;
-	}
-
-	writel(DMA_GET_REQ_MAGIC, controller->regs + OFFSET_DMA_CTRL);
-	if (readl(controller->regs + OFFSET_DMA_CTRL) & CONTROL_DAM_REQUEST) {
-		while (!(readl(controller->regs + OFFSET_DMA_CTRL) &
-			 CONTROL_DAM_GRANT))
-			;
-	}
-
-	decoded_reg_val = readl(controller->regs + SEGMENT_ADDR_REG0 + chip->cs * 4);
-	chip_ahb_start = info->segment_start(controller, decoded_reg_val);
-
-	writel((chip->ctl_val[smc_write] & (~0x0f000f00)) | 0x03000000, chip->ctl);
-
-	/* don't use dma_map_single here, since we cannot make sure the buf's
-	 * start address is 4-byte-aligned.
-	 */
-	memcpy(controller->write_buf, write_buf, len);
-
-	writel(0x0, controller->regs + OFFSET_DMA_CTRL);
-	writel(controller->dma_addr_phy, controller->regs + OFFSET_DMA_RAM_ADDR_REG);
-	writel(chip_ahb_start + to, controller->regs + OFFSET_DMA_FLASH_ADDR_REG);
-	writel(len - 1, controller->regs + OFFSET_DMA_LEN_REG);
-
-	/* enable DMA irq */
-	reg_val = readl(controller->regs + OFFSET_INTR_CTRL_STATUS);
-	reg_val |= SPI_DMA_IRQ_EN;
-	writel(reg_val, controller->regs + OFFSET_INTR_CTRL_STATUS);
-
-	reinit_completion(&controller->dma_done);
-
-	/* enable write DMA */
-	writel(0x3, controller->regs + OFFSET_DMA_CTRL);
-	ret = wait_for_completion_timeout(&controller->dma_done, msecs_to_jiffies(2000));
-	if (ret == 0) {
-		writel(0x0, controller->regs + OFFSET_DMA_CTRL);
-		writel(DMA_DISCARD_REQ_MAGIC, controller->regs + OFFSET_DMA_CTRL);
-		dev_err(nor->dev, "write data timeout %d\n", ret);
-		return 0;
-	}
-
-	writel(0x0, controller->regs + OFFSET_DMA_CTRL);
-	writel(DMA_DISCARD_REQ_MAGIC, controller->regs + OFFSET_DMA_CTRL);
-
-	writel(chip->ctl_val[smc_read], chip->ctl);
 
+	aspeed_smc_start_user(nor);
+	aspeed_smc_send_cmd_addr(nor, nor->program_opcode, to);
+	aspeed_smc_write_to_ahb(chip->ahb_base, write_buf, len);
+	aspeed_smc_stop_user(nor);
 	return len;
 }
 
-static irqreturn_t aspeed_spi_dma_isr(int irq, void *dev_id)
-{
-	struct aspeed_smc_controller *controller =
-		(struct aspeed_smc_controller *)dev_id;
-	uint32_t reg_val;
-
-	if (!(readl(controller->regs + OFFSET_INTR_CTRL_STATUS) & 0x800))
-		return IRQ_NONE;
-
-	reg_val = readl(controller->regs + OFFSET_INTR_CTRL_STATUS);
-	reg_val &= ~SPI_DMA_IRQ_EN;
-	writel(reg_val, controller->regs + OFFSET_INTR_CTRL_STATUS);
-
-	writel(0x0, controller->regs + OFFSET_DMA_CTRL);
-	writel(DMA_DISCARD_REQ_MAGIC, controller->regs + OFFSET_DMA_CTRL);
-
-	complete(&controller->dma_done);
-
-	return IRQ_HANDLED;
-}
-
 static ssize_t aspeed_smc_read(struct spi_nor *nor, loff_t from, size_t len,
 			       u_char *read_buf)
 {
@@ -789,40 +660,6 @@
 	return len;
 }
 
-void aspeed_2600_spi_fill_safs_cmd(struct aspeed_smc_controller *controller,
-		enum aspeed_smc_data_dir dir, uint8_t cmd,
-		uint8_t addr_len, uint8_t bus_width)
-{
-	uint32_t tmp_val;
-
-	if (dir == SMC_DATA_IN) {
-		tmp_val = readl(controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL4);
-		if (addr_len == 4)
-			tmp_val = (tmp_val & 0xffff00ff) | (cmd << 8);
-		else
-			tmp_val = (tmp_val & 0xffffff00) | cmd;
-
-		tmp_val = (tmp_val & 0x0fffffff) | aspeed_spi_get_io_mode(bus_width);
-
-		writel(tmp_val, controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL4);
-
-	} else if (dir == SMC_DATA_OUT) {
-		tmp_val = readl(controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL4);
-		tmp_val = (tmp_val & 0xf0ffffff) |
-				(aspeed_spi_get_io_mode(bus_width) >> 4);
-
-		writel(tmp_val, controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL4);
-
-		tmp_val = readl(controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL2);
-		if (addr_len == 4)
-			tmp_val = (tmp_val & 0xffff00ff) | (cmd << 8);
-		else
-			tmp_val = (tmp_val & 0xffffff00) | cmd;
-
-		writel(tmp_val, controller->regs + OFFSET_HOST_DIRECT_ACCESS_CMD_CTRL2);
-	}
-}
-
 static int aspeed_smc_unregister(struct aspeed_smc_controller *controller)
 {
 	struct aspeed_smc_chip *chip;
@@ -1345,7 +1182,6 @@
 		dev_dbg(chip->nor.dev, "Found good read timings at HCLK/%d",
 			best_div);
 		chip->ctl_val[smc_read] |= ASPEED_SMC_HCLK_DIV(best_div);
-		chip->ctl_val[smc_write] |= ASPEED_SMC_HCLK_DIV(best_div);
 	}
 
 	writel(chip->ctl_val[smc_read], chip->ctl);
@@ -1536,7 +1372,7 @@
 		nor->priv = chip;
 		spi_nor_set_flash_node(nor, child);
 		nor->read = aspeed_smc_read;
-		nor->write = aspeed_smc_write;
+		nor->write = aspeed_smc_write_user;
 		nor->read_reg = aspeed_smc_read_reg;
 		nor->write_reg = aspeed_smc_write_reg;
 		nor->prepare = aspeed_smc_prep;
@@ -1611,13 +1447,6 @@
 #endif
 
 		controller->chips[cs] = chip;
-
-		if (info->safs_support) {
-			info->safs_support(controller, SMC_DATA_IN,
-				nor->read_opcode, nor->addr_width, width);
-			info->safs_support(controller, SMC_DATA_OUT,
-				nor->program_opcode, nor->addr_width, 1);
-		}
 	}
 
 	if (ret)
@@ -1666,28 +1495,6 @@
 
 	controller->ahb_window_size = resource_size(res);
 
-	controller->write_buf = (uint8_t *)dma_alloc_coherent(&pdev->dev,
-		WRITTEN_DMA_BUF_LEN, &controller->dma_addr_phy, GFP_DMA | GFP_KERNEL);
-	if (!controller->write_buf) {
-		dev_err(dev, "fail to alloc write_buf.\n");
-		return -ENOMEM;
-	}
-
-	controller->irq = platform_get_irq(pdev, 0);
-	if (controller->irq < 0) {
-		dev_err(dev, "fail to get irq (%d)\n", controller->irq);
-		return controller->irq;
-	}
-
-	ret = devm_request_irq(dev, controller->irq, aspeed_spi_dma_isr,
-					IRQF_SHARED, dev_name(dev), controller);
-	if (ret < 0) {
-		dev_err(dev, "fail to request irq (%d)\n", ret);
-		return ret;
-	}
-
-	init_completion(&controller->dma_done);
-
 	clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(clk))
 		return PTR_ERR(clk);
