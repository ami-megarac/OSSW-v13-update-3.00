diff -Naur linux/drivers/usb/gadget/udc/aspeed-vhub/core.c linux-new/drivers/usb/gadget/udc/aspeed-vhub/core.c
--- linux/drivers/usb/gadget/udc/aspeed-vhub/core.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/usb/gadget/udc/aspeed-vhub/core.c	2020-12-23 16:50:37.225696800 -0500
@@ -65,16 +65,14 @@
 void ast_vhub_nuke(struct ast_vhub_ep *ep, int status)
 {
 	struct ast_vhub_req *req;
-	int count = 0;
+
+	EPDBG(ep, "Nuking\n");
 
 	/* Beware, lock will be dropped & req-acquired by done() */
 	while (!list_empty(&ep->queue)) {
 		req = list_first_entry(&ep->queue, struct ast_vhub_req, queue);
 		ast_vhub_done(ep, req, status);
-		count++;
 	}
-	if (count)
-		EPDBG(ep, "Nuked %d request(s)\n", count);
 }
 
 struct usb_request *ast_vhub_alloc_request(struct usb_ep *u_ep,
@@ -138,7 +136,9 @@
 		     VHUB_IRQ_DEVICE2 |
 		     VHUB_IRQ_DEVICE3 |
 		     VHUB_IRQ_DEVICE4 |
-		     VHUB_IRQ_DEVICE5)) {
+		     VHUB_IRQ_DEVICE5 |
+		     VHUB_IRQ_DEVICE6 |
+		     VHUB_IRQ_DEVICE7)) {
 		if (istat & VHUB_IRQ_DEVICE1)
 			ast_vhub_dev_irq(&vhub->ports[0].dev);
 		if (istat & VHUB_IRQ_DEVICE2)
@@ -149,6 +149,11 @@
 			ast_vhub_dev_irq(&vhub->ports[3].dev);
 		if (istat & VHUB_IRQ_DEVICE5)
 			ast_vhub_dev_irq(&vhub->ports[4].dev);
+		if (istat & VHUB_IRQ_DEVICE6)
+			ast_vhub_dev_irq(&vhub->ports[5].dev);
+		if (istat & VHUB_IRQ_DEVICE7)
+			ast_vhub_dev_irq(&vhub->ports[6].dev);
+		
 	}
 
 	/* Handle top-level vHub EP0 interrupts */
@@ -350,6 +355,7 @@
 	/* Find interrupt and install handler */
 	vhub->irq = platform_get_irq(pdev, 0);
 	if (vhub->irq < 0) {
+		dev_err(&pdev->dev, "Failed to get interrupt\n");
 		rc = vhub->irq;
 		goto err;
 	}
@@ -407,6 +413,9 @@
 	{
 		.compatible = "aspeed,ast2500-usb-vhub",
 	},
+	{
+		.compatible = "aspeed,ast2600-usb-vhub",
+	},
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ast_vhub_dt_ids);
diff -Naur linux/drivers/usb/gadget/udc/aspeed-vhub/dev.c linux-new/drivers/usb/gadget/udc/aspeed-vhub/dev.c
--- linux/drivers/usb/gadget/udc/aspeed-vhub/dev.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/usb/gadget/udc/aspeed-vhub/dev.c	2020-12-23 16:50:37.225696800 -0500
@@ -458,6 +458,20 @@
 	return 0;
 }
 
+static int ast_vhub_udc_upstream_connect(struct usb_gadget *gadget)
+{
+	struct ast_vhub_dev *d = to_ast_dev(gadget);
+
+	return ast_vhub_upstream_connect(d->vhub);
+}
+
+static int ast_vhub_udc_upstream_disconnect(struct usb_gadget *gadget)
+{
+	struct ast_vhub_dev *d = to_ast_dev(gadget);
+	
+	return ast_vhub_upstream_disconnect(d->vhub);
+}
+
 static const struct usb_gadget_ops ast_vhub_udc_ops = {
 	.get_frame	= ast_vhub_udc_get_frame,
 	.wakeup		= ast_vhub_udc_wakeup,
@@ -465,6 +479,8 @@
 	.udc_start	= ast_vhub_udc_start,
 	.udc_stop	= ast_vhub_udc_stop,
 	.match_ep	= ast_vhub_udc_match_ep,
+	.udc_upstream_connect 		= ast_vhub_udc_upstream_connect,
+	.udc_upstream_disconnect	= ast_vhub_udc_upstream_disconnect,
 };
 
 void ast_vhub_dev_suspend(struct ast_vhub_dev *d)
diff -Naur linux/drivers/usb/gadget/udc/aspeed-vhub/hub.c linux-new/drivers/usb/gadget/udc/aspeed-vhub/hub.c
--- linux/drivers/usb/gadget/udc/aspeed-vhub/hub.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/usb/gadget/udc/aspeed-vhub/hub.c	2020-12-23 16:50:37.225696800 -0500
@@ -49,6 +49,8 @@
 #define KERNEL_REL	bin2bcd(((LINUX_VERSION_CODE >> 16) & 0x0ff))
 #define KERNEL_VER	bin2bcd(((LINUX_VERSION_CODE >> 8) & 0x0ff))
 
+#define VENDOR_ID		0x046B	/* AMI = Decimal 1131 */
+#define PRODUCT_ID_HUB		0xFF01
 enum {
 	AST_VHUB_STR_MANUF = 3,
 	AST_VHUB_STR_PRODUCT = 2,
@@ -63,8 +65,8 @@
 	.bDeviceSubClass	= 0,
 	.bDeviceProtocol	= 1,
 	.bMaxPacketSize0	= 64,
-	.idVendor		= cpu_to_le16(0x1d6b),
-	.idProduct		= cpu_to_le16(0x0107),
+	.idVendor		= cpu_to_le16(VENDOR_ID),
+	.idProduct		= cpu_to_le16(PRODUCT_ID_HUB),
 	.bcdDevice		= cpu_to_le16(0x0100),
 	.iManufacturer		= AST_VHUB_STR_MANUF,
 	.iProduct		= AST_VHUB_STR_PRODUCT,
@@ -151,15 +153,15 @@
 static const struct usb_string ast_vhub_str_array[] = {
 	{
 		.id = AST_VHUB_STR_SERIAL,
-		.s = "00000000"
+		.s = "serial"
 	},
 	{
 		.id = AST_VHUB_STR_PRODUCT,
-		.s = "USB Virtual Hub"
+		.s = "Virtual Hub"
 	},
 	{
 		.id = AST_VHUB_STR_MANUF,
-		.s = "Aspeed"
+		.s = "American Megatrends Inc."
 	},
 	{ }
 };
@@ -840,3 +842,151 @@
 	INIT_WORK(&vhub->wake_work, ast_vhub_wake_work);
 }
 
+int ast_vhub_upstream_connect(struct ast_vhub *vhub)
+{
+	u32 ctrl;
+	int rc = 0;
+	unsigned long flags;
+	
+	spin_lock_irqsave(&vhub->lock, flags);
+	
+	vhub->clk = devm_clk_get(&vhub->pdev->dev, NULL);
+		if (IS_ERR(vhub->clk)) {
+			rc = PTR_ERR(vhub->clk);
+			goto err;
+		}
+		
+	rc = clk_prepare_enable(vhub->clk);
+	if (rc) {
+		dev_err(&vhub->pdev->dev, "Error couldn't enable clock (%d)\n", rc);	
+		goto err;
+	}
+	/*
+	 * Allocate DMA buffers for all EP0s in one chunk,
+	 * one per port and one for the vHub itself
+	 */
+	vhub->ep0_bufs = dma_alloc_coherent(&vhub->pdev->dev,
+						AST_VHUB_EP0_MAX_PACKET *
+						(AST_VHUB_NUM_PORTS + 1),
+						&vhub->ep0_bufs_dma, GFP_KERNEL);
+	if (!vhub->ep0_bufs) {
+		dev_err(&vhub->pdev->dev, "Failed to allocate EP0 DMA buffers\n");
+		rc = -ENOMEM;
+		goto err;
+	}
+	/* Enable PHY */
+	ctrl = VHUB_CTRL_PHY_CLK |
+		VHUB_CTRL_PHY_RESET_DIS;
+
+	   /*
+	* We do *NOT* set the VHUB_CTRL_CLK_STOP_SUSPEND bit
+	* to stop the logic clock during suspend because
+	* it causes the registers to become inaccessible and
+	* we haven't yet figured out a good wayt to bring the
+	* controller back into life to issue a wakeup.
+	*/
+
+	/*
+	 * Set some ISO & split control bits according to Aspeed
+	 * recommendation
+	 *
+	 * VHUB_CTRL_ISO_RSP_CTRL: When set tells the HW to respond
+	 * with 0 bytes data packet to ISO IN endpoints when no data
+	 * is available.
+	 *
+	 * VHUB_CTRL_SPLIT_IN: This makes a SOF complete a split IN
+	 * transaction.
+	 */
+	ctrl |= VHUB_CTRL_ISO_RSP_CTRL | VHUB_CTRL_SPLIT_IN;
+	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+	udelay(1);
+
+	/* Set descriptor ring size */
+	if (AST_VHUB_DESCS_COUNT == 256) {
+		ctrl |= VHUB_CTRL_LONG_DESC;
+		writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+	} else {
+		BUILD_BUG_ON(AST_VHUB_DESCS_COUNT != 32);
+	}
+
+	/* Reset all devices */
+	writel(VHUB_SW_RESET_ALL, vhub->regs + AST_VHUB_SW_RESET);
+	udelay(1);
+	writel(0, vhub->regs + AST_VHUB_SW_RESET);
+
+	/* Disable and cleanup EP ACK/NACK interrupts */
+	writel(0, vhub->regs + AST_VHUB_EP_ACK_IER);
+	writel(0, vhub->regs + AST_VHUB_EP_NACK_IER);
+	writel(VHUB_EP_IRQ_ALL, vhub->regs + AST_VHUB_EP_ACK_ISR);
+	writel(VHUB_EP_IRQ_ALL, vhub->regs + AST_VHUB_EP_NACK_ISR);
+
+	/* Default settings for EP0, enable HW hub EP1 */
+	writel(0, vhub->regs + AST_VHUB_EP0_CTRL);
+	writel(VHUB_EP1_CTRL_RESET_TOGGLE |
+		   VHUB_EP1_CTRL_ENABLE,
+		   vhub->regs + AST_VHUB_EP1_CTRL);
+	writel(0, vhub->regs + AST_VHUB_EP1_STS_CHG);
+
+	/* Configure EP0 DMA buffer */
+	writel(vhub->ep0.buf_dma, vhub->regs + AST_VHUB_EP0_DATA);
+
+	/* Clear address */
+	writel(0, vhub->regs + AST_VHUB_CONF);
+	
+	/* Pullup hub (activate on host) */
+	if (vhub->force_usb1)
+		ctrl |= VHUB_CTRL_FULL_SPEED_ONLY;
+
+	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
+	ctrl |= VHUB_CTRL_UPSTREAM_CONNECT;
+	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+
+	/* Enable some interrupts */
+	writel(VHUB_IRQ_HUB_EP0_IN_ACK_STALL |
+		   VHUB_IRQ_HUB_EP0_OUT_ACK_STALL |
+		   VHUB_IRQ_HUB_EP0_SETUP |
+		   VHUB_IRQ_EP_POOL_ACK_STALL |
+		   VHUB_IRQ_BUS_RESUME |
+		   VHUB_IRQ_BUS_SUSPEND |
+		   VHUB_IRQ_BUS_RESET,
+		   vhub->regs + AST_VHUB_IER);
+
+	spin_unlock_irqrestore(&vhub->lock, flags);
+	return 0;
+err:
+	return -1;
+}
+
+int ast_vhub_upstream_disconnect(struct ast_vhub *vhub)
+{
+	u32 ctrl;
+	unsigned long flags;
+
+	spin_lock_irqsave(&vhub->lock, flags);
+
+	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
+	ctrl &= ~VHUB_CTRL_UPSTREAM_CONNECT;
+	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
+	
+	// Pull device, leave PHY enabled 
+	writel(0, vhub->regs + AST_VHUB_IER);
+	writel(VHUB_IRQ_ACK_ALL, vhub->regs + AST_VHUB_ISR);
+
+	// Pull device, leave PHY enabled 
+	writel(VHUB_CTRL_PHY_CLK |
+	       VHUB_CTRL_PHY_RESET_DIS,
+	       vhub->regs + AST_VHUB_CTRL);
+	if (vhub->clk)
+		clk_disable_unprepare(vhub->clk);
+	spin_unlock_irqrestore(&vhub->lock, flags);
+
+	if (vhub->ep0_bufs)
+		dma_free_coherent(&vhub->pdev->dev,
+				  AST_VHUB_EP0_MAX_PACKET *
+				  (AST_VHUB_NUM_PORTS + 1),
+				  vhub->ep0_bufs,
+				  vhub->ep0_bufs_dma);
+	vhub->ep0_bufs = NULL;
+	
+	return 0;
+}
diff -Naur linux/drivers/usb/gadget/udc/aspeed-vhub/vhub.h linux-new/drivers/usb/gadget/udc/aspeed-vhub/vhub.h
--- linux/drivers/usb/gadget/udc/aspeed-vhub/vhub.h	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/usb/gadget/udc/aspeed-vhub/vhub.h	2020-12-23 16:50:37.225696800 -0500
@@ -51,6 +51,8 @@
 #define VHUB_IRQ_USB_CMD_DEADLOCK		(1 << 18)
 #define VHUB_IRQ_EP_POOL_NAK			(1 << 17)
 #define VHUB_IRQ_EP_POOL_ACK_STALL		(1 << 16)
+#define VHUB_IRQ_DEVICE7			(1 << 15)
+#define VHUB_IRQ_DEVICE6			(1 << 14)
 #define VHUB_IRQ_DEVICE5			(1 << 13)
 #define VHUB_IRQ_DEVICE4			(1 << 12)
 #define VHUB_IRQ_DEVICE3			(1 << 11)
@@ -209,9 +211,13 @@
  * Data structures and misc definitions *
  *                                      *
  ****************************************/
-
+#ifdef CONFIG_MACH_ASPEED_G6
+#define AST_VHUB_NUM_GEN_EPs	21	/* Generic non-0 EPs */
+#define AST_VHUB_NUM_PORTS	7	/* vHub ports */
+#else
 #define AST_VHUB_NUM_GEN_EPs	15	/* Generic non-0 EPs */
 #define AST_VHUB_NUM_PORTS	5	/* vHub ports */
+#endif
 #define AST_VHUB_EP0_MAX_PACKET	64	/* EP0's max packet size */
 #define AST_VHUB_EPn_MAX_PACKET	1024	/* Generic EPs max packet size */
 #define AST_VHUB_DESCS_COUNT	256	/* Use 256 descriptor mode (valid
@@ -518,6 +524,8 @@
 			       __VA_ARGS__)
 
 /* hub.c */
+int ast_vhub_upstream_disconnect(struct ast_vhub *vhub);
+int ast_vhub_upstream_connect(struct ast_vhub *vhub);
 void ast_vhub_init_hub(struct ast_vhub *vhub);
 enum std_req_rc ast_vhub_std_hub_request(struct ast_vhub_ep *ep,
 					 struct usb_ctrlrequest *crq);
diff -Naur linux/drivers/usb/gadget/udc/core.c linux-new/drivers/usb/gadget/udc/core.c
--- linux/drivers/usb/gadget/udc/core.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/usb/gadget/udc/core.c	2020-12-23 16:50:37.225696800 -0500
@@ -45,6 +45,7 @@
 static LIST_HEAD(udc_list);
 static LIST_HEAD(gadget_driver_pending_list);
 static DEFINE_MUTEX(udc_lock);
+static int virtual_device_status = 0;
 
 static int udc_bind_to_driver(struct usb_udc *udc,
 		struct usb_gadget_driver *driver);
@@ -1099,6 +1100,72 @@
 	udc->gadget->ops->udc_stop(udc->gadget);
 }
 
+int usb_gadget_vhub_upstream_enalbe(struct usb_gadget *gadget)
+{
+	struct usb_udc *udc;
+
+	if(virtual_device_status == 1)
+		return 0;
+	if(gadget != NULL) {
+		gadget->ops->udc_upstream_connect(gadget);
+	} else {
+	/* For now we take the first available UDC */
+		mutex_lock(&udc_lock);
+		list_for_each_entry(udc, &udc_list, list) {
+			if (udc->gadget!= NULL) {
+				break;
+			}
+		}
+		mutex_unlock(&udc_lock);
+		if(udc->gadget == NULL) {
+			//not found available gadget
+			return -1;
+		}
+		udc->gadget->ops->udc_upstream_connect(udc->gadget);	
+	}
+	virtual_device_status = 1;
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(usb_gadget_vhub_upstream_enalbe);
+
+int usb_gadget_vhub_upstream_disable(struct usb_gadget *gadget)
+{
+	struct usb_udc *udc;
+
+	if(virtual_device_status == 0)
+		return 0;
+	if(gadget != NULL) {
+		gadget->ops->udc_upstream_disconnect(gadget);
+	} else {
+	/* For now we take the first available UDC */
+		mutex_lock(&udc_lock);
+		list_for_each_entry(udc, &udc_list, list) {
+			if (udc->gadget!= NULL) {
+				break;
+			}
+		}
+		mutex_unlock(&udc_lock);
+		if(udc->gadget == NULL) {
+			//not found available gadget
+			return -1;
+		}
+		udc->gadget->ops->udc_upstream_disconnect(udc->gadget);	
+	}
+	virtual_device_status = 0;
+
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(usb_gadget_vhub_upstream_disable);
+
+int usb_gadget_get_all_device_status(int *status)
+{
+	*status = virtual_device_status;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(usb_gadget_get_all_device_status);
+
 /**
  * usb_gadget_udc_set_speed - tells usb device controller speed supported by
  *    current driver
@@ -1297,8 +1364,6 @@
 	kobject_uevent(&udc->dev.kobj, KOBJ_CHANGE);
 
 	usb_gadget_disconnect(udc->gadget);
-	if (udc->gadget->irq)
-		synchronize_irq(udc->gadget->irq);
 	udc->driver->unbind(udc->gadget);
 	usb_gadget_udc_stop(udc);
 
