diff -Naur linux/drivers/char/ipmi/bt-bmc.c linux-new/drivers/char/ipmi/bt-bmc.c
--- linux/drivers/char/ipmi/bt-bmc.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/char/ipmi/bt-bmc.c	2020-12-23 15:53:45.809913940 -0500
@@ -513,6 +513,7 @@
 static const struct of_device_id bt_bmc_match[] = {
 	{ .compatible = "aspeed,ast2400-ibt-bmc" },
 	{ .compatible = "aspeed,ast2500-ibt-bmc" },
+	{ .compatible = "aspeed,ast2600-ibt-bmc" },
 	{ },
 };
 
diff -Naur linux/drivers/char/ipmi/ipmb_dev_int.c linux-new/drivers/char/ipmi/ipmb_dev_int.c
--- linux/drivers/char/ipmi/ipmb_dev_int.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/char/ipmi/ipmb_dev_int.c	2020-12-23 15:53:45.809913940 -0500
@@ -19,7 +19,7 @@
 #include <linux/spinlock.h>
 #include <linux/wait.h>
 
-#define MAX_MSG_LEN		128
+#define MAX_MSG_LEN		240
 #define IPMB_REQUEST_LEN_MIN	7
 #define NETFN_RSP_BIT_MASK	0x4
 #define REQUEST_QUEUE_MAX_LEN	256
@@ -63,6 +63,7 @@
 	spinlock_t lock;
 	wait_queue_head_t wait_queue;
 	struct mutex file_mutex;
+	bool is_i2c_protocol;
 };
 
 static inline struct ipmb_dev *to_ipmb_dev(struct file *file)
@@ -112,6 +113,25 @@
 	return ret < 0 ? ret : count;
 }
 
+static int ipmb_i2c_write(struct i2c_client *client, u8 *msg, u8 addr)
+{
+	struct i2c_msg i2c_msg;
+
+	/*
+	 * subtract 1 byte (rq_sa) from the length of the msg passed to
+	 * raw i2c_transfer
+	 */
+	i2c_msg.len = msg[IPMB_MSG_LEN_IDX] - 1;
+
+	/* Assign message to buffer except first 2 bytes (length and address) */
+	i2c_msg.buf = msg + 2;
+
+	i2c_msg.addr = addr;
+	i2c_msg.flags = client->flags & I2C_CLIENT_PEC;
+
+	return i2c_transfer(client->adapter, &i2c_msg, 1);
+}
+
 static ssize_t ipmb_write(struct file *file, const char __user *buf,
 			size_t count, loff_t *ppos)
 {
@@ -133,8 +153,11 @@
 	rq_sa = GET_7BIT_ADDR(msg[RQ_SA_8BIT_IDX]);
 	netf_rq_lun = msg[NETFN_LUN_IDX];
 
-	if (!(netf_rq_lun & NETFN_RSP_BIT_MASK))
-		return -EINVAL;
+	/* Check i2c block transfer vs smbus */
+	if (ipmb_dev->is_i2c_protocol) {
+		ret = ipmb_i2c_write(ipmb_dev->client, msg, rq_sa);
+		return (ret == 1) ? count : ret;
+	}
 
 	/*
 	 * subtract rq_sa and netf_rq_lun from the length of the msg passed to
@@ -203,25 +226,16 @@
 		ipmb_dev->request.checksum1);
 }
 
-static bool is_ipmb_request(struct ipmb_dev *ipmb_dev, u8 rs_sa)
+/*
+ * Verify if message has proper ipmb header with minimum length
+ * and correct checksum byte.
+ */
+static bool is_ipmb_msg(struct ipmb_dev *ipmb_dev, u8 rs_sa)
 {
-	if (ipmb_dev->msg_idx >= IPMB_REQUEST_LEN_MIN) {
-		if (ipmb_verify_checksum1(ipmb_dev, rs_sa))
-			return false;
+	if ((ipmb_dev->msg_idx >= IPMB_REQUEST_LEN_MIN) &&
+	   (!ipmb_verify_checksum1(ipmb_dev, rs_sa)))
+		return true;
 
-		/*
-		 * Check whether this is an IPMB request or
-		 * response.
-		 * The 6 MSB of netfn_rs_lun are dedicated to the netfn
-		 * while the remaining bits are dedicated to the lun.
-		 * If the LSB of the netfn is cleared, it is associated
-		 * with an IPMB request.
-		 * If the LSB of the netfn is set, it is associated with
-		 * an IPMB response.
-		 */
-		if (!(ipmb_dev->request.netfn_rs_lun & NETFN_RSP_BIT_MASK))
-			return true;
-	}
 	return false;
 }
 
@@ -273,8 +287,7 @@
 
 	case I2C_SLAVE_STOP:
 		ipmb_dev->request.len = ipmb_dev->msg_idx;
-
-		if (is_ipmb_request(ipmb_dev, GET_8BIT_ADDR(client->addr)))
+		if (is_ipmb_msg(ipmb_dev, GET_8BIT_ADDR(client->addr)))
 			ipmb_handle_request(ipmb_dev);
 		break;
 
@@ -315,6 +328,9 @@
 	if (ret)
 		return ret;
 
+	ipmb_dev->is_i2c_protocol
+		= device_property_read_bool(&client->dev, "i2c-protocol");
+
 	ipmb_dev->client = client;
 	i2c_set_clientdata(client, ipmb_dev);
 	ret = i2c_slave_register(client, ipmb_slave_cb);
diff -Naur linux/drivers/char/ipmi/kcs_bmc_aspeed.c linux-new/drivers/char/ipmi/kcs_bmc_aspeed.c
--- linux/drivers/char/ipmi/kcs_bmc_aspeed.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/char/ipmi/kcs_bmc_aspeed.c	2020-12-23 15:53:45.817914188 -0500
@@ -24,9 +24,8 @@

 #define DEVICE_NAME     "ast-kcs-bmc"

-#define KCS_CHANNEL_MAX     4
+#define KCS_CHANNEL_MAX     10

-/* mapped to lpc-bmc@0 IO space */
 #define LPC_HICR0            0x000
 #define     LPC_HICR0_LPC3E          BIT(7)
 #define     LPC_HICR0_LPC2E          BIT(6)
@@ -51,15 +50,23 @@
 #define LPC_STR1             0x03C
 #define LPC_STR2             0x040
 #define LPC_STR3             0x044
+#define LPC_HICRB            0x100
+#define     LPC_HICRB_EN16LADR2         BIT(5)
+#define     LPC_HICRB_EN16LADR1         BIT(4)
+#define     LPC_HICRB_IBFIF4            BIT(1)
+#define     LPC_HICRB_LPC4E             BIT(0)
+#define LPC_LADR4            0x110
+#define LPC_IDR4             0x114
+#define LPC_ODR4             0x118
+#define LPC_STR4             0x11C
+#define     LPC_STR4_STAT_MASK          GENMASK(7, 6)
+#define     LPC_STR4_STAT_SHIFT         6
+#define LPC_LSADR12          0x120
+#define     LPC_LSADR12_STS_ADDR2_MASK  GENMASK(31, 16)
+#define     LPC_LSADR12_STS_ADDR2_SHIFT 16
+#define     LPC_LSADR12_STS_ADDR1_MASK  GENMASK(15, 0)
+#define     LPC_LSADR12_STS_ADDR1_SHIFT 0

-/* mapped to lpc-host@80 IO space */
-#define LPC_HICRB            0x080
-#define     LPC_HICRB_IBFIF4         BIT(1)
-#define     LPC_HICRB_LPC4E          BIT(0)
-#define LPC_LADR4            0x090
-#define LPC_IDR4             0x094                                                                                                                                                    
-#define LPC_ODR4             0x098
-#define LPC_STR4             0x09C

 struct aspeed_kcs_bmc {
    struct regmap *map;
@@ -87,19 +94,15 @@
    WARN(rc != 0, "regmap_write() failed: %d\n", rc);
 }

-
 /*
- * AST_usrGuide_KCS.pdf
- * 2. Background:
- *   we note D for Data, and C for Cmd/Status, default rules are
- *     A. KCS1 / KCS2 ( D / C:X / X+4 )
- *        D / C : CA0h / CA4h
- *        D / C : CA8h / CACh
- *     B. KCS3 ( D / C:XX2h / XX3h )
- *        D / C : CA2h / CA3h
- *        D / C : CB2h / CB3h
- *     C. KCS4
- *        D / C : CA4h / CA5h
+ *  we note D for Data, and C for Cmd/Status, default rules are
+ *    A. KCS1/KCS2/KCS4 (D/C: X/X+1)
+ *       D / C : CA0h / CA1h
+ *       D / C : CA8h / CA9h
+ *       D / C : CA4h / CA5h
+ *    B. KCS3 (D/C: XX2h/XX3h )
+ *       D / C : CA2h / CA3h
+ *       D / C : CB2h / CB3h
  */
 static void aspeed_kcs_set_address(struct kcs_bmc *kcs_bmc, u16 addr)
 {
@@ -107,25 +110,39 @@
 
    switch (kcs_bmc->channel) {
    case 1:
+   case 6:
+       regmap_update_bits(priv->map, LPC_HICRB,
+               LPC_HICRB_EN16LADR1, LPC_HICRB_EN16LADR1);
        regmap_update_bits(priv->map, LPC_HICR4,
                LPC_HICR4_LADR12AS, 0);
        regmap_write(priv->map, LPC_LADR12H, addr >> 8);
        regmap_write(priv->map, LPC_LADR12L, addr & 0xFF);
+       regmap_update_bits(priv->map, LPC_LSADR12,
+               LPC_LSADR12_STS_ADDR1_MASK,
+               (u32)(addr + 1) << LPC_LSADR12_STS_ADDR1_SHIFT);
        break;
 
    case 2:
+   case 7:
+       regmap_update_bits(priv->map, LPC_HICRB,
+               LPC_HICRB_EN16LADR2, LPC_HICRB_EN16LADR2);
        regmap_update_bits(priv->map, LPC_HICR4,
                LPC_HICR4_LADR12AS, LPC_HICR4_LADR12AS);
        regmap_write(priv->map, LPC_LADR12H, addr >> 8);
        regmap_write(priv->map, LPC_LADR12L, addr & 0xFF);
+       regmap_update_bits(priv->map, LPC_LSADR12,
+               LPC_LSADR12_STS_ADDR2_MASK,
+               (u32)(addr + 1) << LPC_LSADR12_STS_ADDR2_SHIFT);
        break;
 
    case 3:
+   case 8:
        regmap_write(priv->map, LPC_LADR3H, addr >> 8);
        regmap_write(priv->map, LPC_LADR3L, addr & 0xFF);
        break;
 
    case 4:
+   case 9:
        regmap_write(priv->map, LPC_LADR4, ((addr + 1) << 16) |
            addr);
        break;
@@ -141,6 +158,7 @@
 
    switch (kcs_bmc->channel) {
    case 1:
+   case 6:
        if (enable) {
            regmap_update_bits(priv->map, LPC_HICR2,
                    LPC_HICR2_IBFIF1, LPC_HICR2_IBFIF1);
@@ -155,6 +173,7 @@
        break;
 
    case 2:
+   case 7:
        if (enable) {
            regmap_update_bits(priv->map, LPC_HICR2,
                    LPC_HICR2_IBFIF2, LPC_HICR2_IBFIF2);
@@ -169,6 +188,7 @@
        break;
 
    case 3:
+   case 8:
        if (enable) {
            regmap_update_bits(priv->map, LPC_HICR2,
                    LPC_HICR2_IBFIF3, LPC_HICR2_IBFIF3);
@@ -187,10 +207,14 @@
        break;
 
    case 4:
-       if (enable)
+   case 9:
+       if (enable) {
            regmap_update_bits(priv->map, LPC_HICRB,
                    LPC_HICRB_IBFIF4 | LPC_HICRB_LPC4E,
                    LPC_HICRB_IBFIF4 | LPC_HICRB_LPC4E);
+           regmap_update_bits(priv->map, LPC_STR4,
+                   LPC_STR4_STAT_MASK, 0x0);
+       }
        else
            regmap_update_bits(priv->map, LPC_HICRB,
                    LPC_HICRB_IBFIF4 | LPC_HICRB_LPC4E,
@@ -231,6 +255,11 @@
    { .idr = LPC_IDR2, .odr = LPC_ODR2, .str = LPC_STR2 },
    { .idr = LPC_IDR3, .odr = LPC_ODR3, .str = LPC_STR3 },
    { .idr = LPC_IDR4, .odr = LPC_ODR4, .str = LPC_STR4 },
+   { /* legacy, not used */ },
+   { .idr = LPC_IDR1, .odr = LPC_ODR1, .str = LPC_STR1 },
+   { .idr = LPC_IDR2, .odr = LPC_ODR2, .str = LPC_STR2 },
+   { .idr = LPC_IDR3, .odr = LPC_ODR3, .str = LPC_STR3 },
+   { .idr = LPC_IDR4, .odr = LPC_ODR4, .str = LPC_STR4 },
 };
 
 static int aspeed_kcs_probe(struct platform_device *pdev)
@@ -301,6 +330,7 @@
 static const struct of_device_id ast_kcs_bmc_match[] = {
    { .compatible = "aspeed,ast2400-kcs-bmc" },
    { .compatible = "aspeed,ast2500-kcs-bmc" },
+   { .compatible = "aspeed,ast2600-kcs-bmc" },
    { }
 };
 MODULE_DEVICE_TABLE(of, ast_kcs_bmc_match);
diff -Naur linux/drivers/char/ipmi/kcs_bmc.c linux-new/drivers/char/ipmi/kcs_bmc.c
--- linux/drivers/char/ipmi/kcs_bmc.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/char/ipmi/kcs_bmc.c	2020-12-23 15:53:45.817914188 -0500
@@ -18,7 +18,8 @@
 
 #define DEVICE_NAME "ipmi-kcs"
 
-#define KCS_MSG_BUFSIZ    1000
+//#define KCS_MSG_BUFSIZ    1000
+#define KCS_MSG_BUFSIZ    0x4100
 
 #define KCS_ZERO_DATA     0
 
@@ -163,7 +164,11 @@
 		break;
 
 	default:
-		kcs_force_abort(kcs_bmc);
+		set_state(kcs_bmc, ERROR_STATE);
+		read_data(kcs_bmc);
+		write_data(kcs_bmc, KCS_ZERO_DATA);
+		kcs_bmc->data_in_avail = false;
+		kcs_bmc->data_in_idx = 0;
 		break;
 	}
 }
